#ifndef UTILITY_CLASS
#define UTILITY_CLASS

#include <SFML/Graphics/Sprite.hpp>
#include <SFML/Graphics/Text.hpp>
#include "SFML/Graphics.hpp"

#include "Font.hpp"
#include <cmath>
/**
 * @brief Class that contains utilities to facilitate uses, such as relative positions, and take center screen
 * 
 */
class Utility
{
public:
	/**
	 * @brief Places a sprite in the center of the screen being managed
	 * 
	 * @param sprite ex: background figures (sf::Sprite)
	 */
	static void centerOrigin(sf::Sprite& sprite);

	/**
	 * @brief Places a Shape in the center of the screen being managed
	 * 
	 * @param sprite forms generated by sf::Shape, etc.
	 */
	static void centerOrigin(sf::Shape& sprite);

	/**
	 * @brief Places in the center of the screen texts
	 * 
	 * @param text generate by sf::Text
	 */
	static void centerOrigin(sf::Text& text);

	/**
	 * @brief Get the Position Relative object, cutting the screen into strips, as in a large mesh, and choosing to position the element between its x,y
	 * 
	 * @param sv Vector2u relative to screen size 
	 * @param propX Cuts in x
	 * @param propY Cuts in y
	 * @param displacementX position x
	 * @param displacementY position y
	 * @return const sf::Vector2f with coordenates x,y
	 */
	static const sf::Vector2f getPositionRelative(sf::Vector2u sv, unsigned int propX, unsigned int propY, int displacementX = 1, int displacementY = 1);
	/**
	 * @brief Get the Position Relative object, cutting the screen into strips, as in a large mesh, and choosing to position the element between its x,y
	 * 
	 * @param sv Vector2f relative to screen size 
	 * @param propX Cuts in x
	 * @param propY Cuts in y
	 * @param displacementX position x
	 * @param displacementY position y
	 * @return const sf::Vector2f with coordenates x,y
	 */
	static const sf::Vector2f getPositionRelative(sf::Vector2f sv, unsigned int propX, unsigned int propY, int displacementX = 1, int displacementY = 1);
	
	/**
	 * @brief Get the Rect Window object
	 * 
	 * @param displacementX 
	 * @param displacementY 
	 * @return const sf::IntRect 
	 */
	static const sf::IntRect getRectWindow(int displacementX = 0, int displacementY = 0 );
	
	static const sf::Vector2f WINDOW_SIZE;

	// const std::vector<std::string> Fonts = {"media/fonts/Anurati-Regular.otf", "media/fonts/Blanka-Regular.otf"};
};

#endif

